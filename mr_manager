#!/usr/bin/env bash
: '
Author: Ryan Cool
Created: 2021-06-03

Updates:
	* 2023-12-24 RTC
	Cleaned up the code a bit to be more coherent
	----------------
	* 2022-09-09 RTC
	Added run_archive function to compress the dicom folders to hopefully help in saving space.
	----------------
	* 2022-08-12 RTC
	Completely refactored code base adding in functions, exit codes, help flags and other things
	to help run/execute more properly.
'

help=$(cat<<EOF

Usage: mr_manager ((backup | transfer) <scanner> <pi>)

	examples: mr_manager backup prismaa esterlis
		mr_manager transfer prismab cosgrove\n\n
EOF
)

scanner=$2
pi=$3

declare -a file_match
declare -a mris_to_copy

# Checks if there's a match for the pi's study
mr_search() {
	local gather_files
	echo Running for "$(echo "$pi" | tr '[:lower:]' '[:upper:]')" on "$(echo "$scanner" | tr '[:lower:]' '[:upper:]')"
	echo Searching latest scans....
	if FindMyStudy "$scanner" "$pi" | grep -q "$pi"; then
		echo OK
		mapfile -t gather_files < <(FindMyStudy "$scanner" "$pi" | grep -i "$pi" | awk '{print $2}')
		for i in "${gather_files[@]}"; do
			file_match+=("$i")
		done
		# appends matches to mris_to_copy array
		for i in "${file_match[@]}"; do
			if [[ $i == $scanner* ]]; then
				mris_to_copy+=("$i")
			fi
		done
	else
		echo None found for "$pi" on "$scanner"!
		exit 0
	fi
}

run_backup() {
	echo Initializing backup process....
	echo
	echo Found these to copy for "$pi": "${mris_to_copy[@]}"
	echo
	# creates new directory to copy dicoms to if it doesn't exist already
	if [[ -d /bigstore1/irina_sophie_data/dicom_backup/"$pi" ]]; then
		cd /bigstore1/irina_sophie_data/dicom_backup/"$pi" || exit 1
	else
		mkdir -p /bigstore1/irina_sophie_data/dicom_backup/"$pi"
		cd /bigstore1/irina_sophie_data/dicom_backup/"$pi" || exit 1
	fi
	for i in "${mris_to_copy[@]}"; do
		if [[ -d $i || -f $i.tgz ]]; then
			echo "$i" looks to be backed up already. Skipping.
			echo
		else
			mkdir "$i"
			echo Copying files for "$i"
			cp -r /data1/"$scanner"_transfer/"$i"/* /bigstore1/irina_sophie_data/dicom_backup/"$pi"/"$i"/
		fi
	done
	echo "Backup complete!"
	echo
}

run_archive() {
	for i in "${mris_to_copy[@]}"; do
		if [[ -f "$i".tgz ]]; then
			echo "$i" is already archived. Skipping.
		else
			echo Archiving "$i"...
			tar -czf "$i".tgz "$i"
			rm -r "${i:?}"/
			echo Completed!
		fi
	done
	}

run_transfer() {
	echo Found these to copy for "$pi": "${mris_to_copy[@]}"
		# copies files from data1 to directory created
	ssh "$USER"@tauruspet.med.yale.edu 'mkdir -p ~/dicom_backup/\$pi'
	for i in "${mris_to_copy[@]}"; do
		echo Copying files for "$i"
		scp -r /data1/"$scanner"_transfer/"$i" "$USER"@tauruspet.med.yale.edu:/home1/"$USER"/dicom_backup/"$pi"/
	done
	echo "Transfer complete!"
	echo
}

if [[ $# -lt 1 ]]; then 
	# Will print error if not run correctly
	echo Incorrect usage.
	printf "%s" "$help"
	exit 1
else
	# Prints usage info if detects help flags
	if [[ $1 = "-h" || $1 = "--help" ]]; then
		printf "%s" "$help"
		exit 0
	# Runs function if backup is specified
	elif [[ $1 = "backup" ]]; then
		mr_search
		run_backup
		run_archive
	# Runs function if transfer is specified
	elif [[ $1 = "transfer" ]]; then
		mr_search
		run_transfer
	else
		# Will print error if first argument isn't correct
		echo "Backup or Transfer never specified"
		printf "%s" "$help"
		exit 1
	fi
fi
